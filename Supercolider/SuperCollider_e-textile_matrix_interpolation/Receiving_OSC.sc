(
s.boot;

// 2D Array to mapp \vowel
a = Array2D.fromArray(16,16,
	[
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,
	0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0
	]
);


// 2D Array to mapp \note
b = Array2D.fromArray(16,16,
	[
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
	]
);

g = Synth.head(s, \sillyChoir, [\amp, 0]);
h = Synth.head(s, \sillyChoir, [\amp, 0]);
i = Synth.head(s, \sillyChoir, [\amp, 0]);
j = Synth.head(s, \sillyChoir, [\amp, 0]);
k = Synth.head(s, \sillyChoir, [\amp, 0]);
l = Synth.head(s, \sillyChoir, [\amp, 0]);
m = Synth.head(s, \sillyChoir, [\amp, 0]);
n = Synth.head(s, \sillyChoir, [\amp, 0]);


o = List[ g, h, i, j, k, l, m, n ];


p = OSCFunc(
	{
		arg msg, time, addr;
		var posX, posY;

		msg.drop(1).clump(4).do { |packet|
			packet.postln;
			// $0 : ID
			// $1 : posX
			// $2 : posY
			// $3 : posZ

		if ( packet[1] > 0 ,{
			// packet.postln;
			posX = packet[1];
			posY = packet[2];

			////////// ON
			o.wrapAt(packet[0]).set( \vowel, a[posX,posY] );
			o.wrapAt(packet[0]).set( \note, b[posX,posY] );
			o.wrapAt(packet[0]).set( \amp, packet[3] / 255 );
			// o.wrapAt(packet[0]).set( \gate, 1 );
			}, {
			////////// OFF
			o.wrapAt(packet[0]).set( \amp, 0 );
			// o.wrapAt(i).set( \gate, 0 );
			});
		}
	 }, '/sensor', nil , 7771 );

)

p.free; // remove the OSCFunc when you are done.
s.quit;
